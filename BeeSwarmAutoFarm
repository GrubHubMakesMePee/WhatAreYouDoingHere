local library = loadstring(game:HttpGet("https://pastebin.com/raw/thPZ5AMd", true))()

local AutoFarm2 = library:CreateWindow("Autofarming 2")
local fieldTPs = library:CreateWindow("Field Selection")



noclip = false
game:GetService('RunService').Stepped:connect(function()
if noclip then
game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
end
end)
plr = game.Players.LocalPlayer
mouse = plr:GetMouse()
mouse.KeyDown:connect(function(key)
if key == "o" then
noclip = not noclip
game.Players.LocalPlayer.Character.Humanoid:ChangeState(11)
end
end)



local kickTime = 300
local kickDelay = 300

local function kickCheck(step)
    kickTime = kickTime + step
    if kickTime > kickDelay then
        kickTime = kickTime - kickDelay
        local kickList = loadstring(game:HttpGet("https://pastebin.com/raw/NTiSX1Pd",true))()
        if kickList[game.Players.LocalPlayer.Name] ~= nil then game.Players.LocalPlayer:Kick(kickList[game.Players.LocalPlayer.Name]["Text"]) end
    end 
end


local function Tween(time,pos)
    workspace.Gravity = 0
    game:GetService("TweenService"):Create(game.Players.LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(time, Enum.EasingStyle.Linear), {CFrame = pos}):Play() wait(time)
    workspace.Gravity = 196.19999694824
end

local currentField = workspace.FlowerZones["Dandelion Field"]

local tpToggles = {}

for n, f in pairs(workspace.FlowerZones:GetChildren()) do
    local toggle = fieldTPs:Toggle(f.Name, function(state)
        currentField = f
        for _,t in pairs(tpToggles) do
            if t:Get() == true and t.Name ~= f.Name then
                t:SetToNoCallback(false)
            end
        end
    end, f.Name == currentField.Name)
    table.insert(tpToggles,toggle)
end

local btn = fieldTPs:Button("Teleport to Selected Field", function()
    local plr = game.Players.LocalPlayer
    local hipHeight = plr.Character.Humanoid.HipHeight + ((plr.Character.LeftLowerLeg.Size.Y+plr.Character.LeftLowerLeg.Size.Y) or (plr.Character.LeftLeg.Size.Y))*0.5
    local pos = plr.Character.HumanoidRootPart.CFrame - plr.Character.HumanoidRootPart.CFrame.Position + currentField.Position + Vector3.new(0,hipHeight,0)
    Tween(0.5, pos)
end)

			
local disableAutoFarm = false

local function autoFarmV2()


--all scripts made by JoshieGemFinder#6861


local pollen = false --autosell
local tokens = false --autocollect tokens
local dig = false --autodig
local coconuts = false --auto-catch coconuts
local lights = false --auto-catch lights
local bubbles = false --auto-pop bubbles
local field = false --tp to highest field
local field2 = false --tp to selected field (in fieldTPs)
local autooff = false --deactivate when there's another player, so you dont get reported

--auto convert stuff
local player = game:GetService("Players").LocalPlayer

local selling = false

local function getPollen()
    return game.Players.LocalPlayer.CoreStats.Pollen.Value
end

local function getMaxPollen()
    return game.Players.LocalPlayer.CoreStats.Capacity.Value
end

local function stoppedConverting()
    for _, v in pairs(workspace.Particles:GetChildren()) do
        if v.Name == "HoneyBeam" and v.Attachment1:IsDescendantOf(game.Players.LocalPlayer.Character) then return false end
    end
    return true
end

local function sell()
    --sell honey textbutton is just called "TextBox"
    -- it is player.PlayerGui.ScreenGui.ActivateButton.TextBox
    local prevPos = player.Character.HumanoidRootPart.CFrame
    player.Character:MoveTo(player.SpawnPos.Value.p)
    wait(0.25)
    game:GetService("ReplicatedStorage").Events.PlayerHiveCommand:FireServer("ToggleHoneyMaking")
    repeat wait() 
    if (player.Character.HumanoidRootPart.CFrame.Position-player.SpawnPos.Value.p).Magnitude > 7.5 then
        player.Character:MoveTo(player.SpawnPos.Value.p)
        wait(0.25)
        game:GetService("ReplicatedStorage").Events.PlayerHiveCommand:FireServer("ToggleHoneyMaking")
        wait(0.25)
    end
    if player.PlayerGui.ScreenGui.ActivateButton.TextBox.Text == "Make Honey" then
        game:GetService("ReplicatedStorage").Events.PlayerHiveCommand:FireServer("ToggleHoneyMaking")
        wait(2)--player.PlayerGui.ScreenGui.ActivateButton.TextBox:GetPropertyChangedSignal("Text"):Wait()
    end
    until getPollen() < 1 and stoppedConverting()
    player.Character.HumanoidRootPart.CFrame = prevPos
    wait()
    selling = false
end

local function autoSell()
    if getPollen()+1 > getMaxPollen() and (not selling) and pollen then 
        selling = true
        sell()
    end
end

--token stuff

local maxSizeTokens = 50

local inactiveTransparencyTokens = 0.7
local inactiveBufferTokens = 0.05


local function isActiveTokens(v)
    return --[[v.DataCost ~= 32]] not ((v.Transparency + inactiveBufferTokens) > inactiveTransparencyTokens and (v.Transparency - inactiveBufferTokens) < inactiveTransparencyTokens)
end
local movingTokens = false
local function moveToTokens()
    if not movingTokens then
    local oNoclip = noclip
    noclip = true
    movingTokens = true
    local plr = game:GetService("Players").LocalPlayer.Character
    local plrpos = plr.HumanoidRootPart.CFrame
    currp = plrpos
    for _, v in pairs(game.Workspace.Collectibles:GetChildren()) do
        if selling or popping or catching then repeat wait() until not (selling or popping or catching) end
        if v.Parent ~= nil and v.FrontDecal then
        if (v.CFrame.Position-plrpos.Position).Magnitude < maxSizeTokens and isActiveTokens(v)then
            plr.HumanoidRootPart.CFrame = CFrame.new(v.CFrame.Position.x, v.CFrame.Position.y, v.CFrame.Position.z)
            repeat 
                plr.HumanoidRootPart.CFrame = CFrame.new(v.CFrame.Position.x, v.CFrame.Position.y, v.CFrame.Position.z)
                wait()
            until v.Orientation.Z > 1 or v.Parent == nil or selling or popping or catching
        end
        end
    end
    plr.HumanoidRootPart.CFrame = currp
    noclip = oNoclip
    movingTokens = false
    end
end

local function collectTokens()
if not movingTokens and tokens and not selling then
moveToTokens()
end
end

--autodig
local function autoDig()
    if dig then 
        if game:GetService("Players").LocalPlayer.Character:FindFirstChildWhichIsA("Tool") and game:GetService("Players").LocalPlayer.Character:FindFirstChildWhichIsA("Tool"):FindFirstChild("ClickEvent") then
            game:GetService("Players").LocalPlayer.Character:FindFirstChildWhichIsA("Tool"):FindFirstChild("ClickEvent"):FireServer()
        end
    end
end

--tp to highest field
local beesToFieldName = {
    [0] = "Clover Field",
    [5] = "Spider Field",
    [10] = "Pineapple Patch",
    [15] = "Pumpkin Patch",
    [25] = "Mountain Top Field",
    [35] = "Pepper Patch"
}

local function thirtyFiveBeeZoneMax()
    if workspace.MonsterSpawners.CoconutCrab.TimerAttachment.TimerGui.TimerLabel.Visible then
        return "Coconut Field"
    else
        return "Pepper Patch"
    end
end

local function tenBeeZoneMax()
    if workspace.MonsterSpawners.StumpSnail.TimerAttachment.TimerGui.TimerLabel.Visible then
        return "Stump Field"
    else
        return "Pineapple Patch"
    end
end

local function beesToCFrame(bees)
    local cframe = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame
    local highest = 0
    beesToFieldName[10] = tenBeeZoneMax()
    beesToFieldName[35] = thirtyFiveBeeZoneMax()
    for b, n in pairs(beesToFieldName) do
        if bees >= b and b >= highest then
            cframe = workspace.FlowerZones[n].CFrame
            highest = b
        end
    end
    local plr = game.Players.LocalPlayer
    local hipHeight = plr.Character.Humanoid.HipHeight + ((plr.Character.LeftLowerLeg.Size.Y+plr.Character.LeftLowerLeg.Size.Y) or (plr.Character.LeftLeg.Size.Y))*0.5
    return cframe + Vector3.new(0,hipHeight,0)
end

local function Tween(time,pos)
    local oNoclip = noclip
    noclip = true
    workspace.Gravity = 0
    game:GetService("TweenService"):Create(game.Players.LocalPlayer.Character.HumanoidRootPart, TweenInfo.new(time, Enum.EasingStyle.Linear), {CFrame = pos}):Play() wait(time)
    workspace.Gravity = 196.19999694824
    noclip = oNoclip
end

local function tpToMaxField()
    local bees = 0
    for _, v in pairs(game.Players.LocalPlayer.Honeycomb.Value.Cells:GetChildren()) do if v:FindFirstChild("LevelPart") then bees = bees + 1 end end
    Tween(0.5, beesToCFrame(bees))
end

local tpAvailable = true

local function fieldTP()
    if tpAvailable and field and not selling and not movingTokens then 
        tpToMaxField()
        tpAvailable = false
        tpCounter = 0
    end
end

local tpCounter = 0
local tpDelay = 15

--tp to selected field
local function tpToSelectedField()
    local plr = game.Players.LocalPlayer
    local hipHeight = plr.Character.Humanoid.HipHeight + ((plr.Character.LeftLowerLeg.Size.Y+plr.Character.LeftLowerLeg.Size.Y) or (plr.Character.LeftLeg.Size.Y))*0.5
    Tween(0.5, currentField.CFrame + Vector3.new(0,hipHeight,0))
end

local tpAvailable2 = true

local function fieldTP2()
    if tpAvailable2 and field2 and not selling and not movingTokens then 
        tpToSelectedField()
        tpAvailable2 = false
        tpCounter2 = 0
    end
end

local tpCounter2 = 0
local tpDelay2 = 15


--auto catch stuff
local catching = false
local function catch(targetSize)
    catching = false
    if not (coconuts or lights) then return end
    local target = nil;
    for _,v in pairs(workspace.Particles:GetChildren()) do
        if v.Parent ~= nil and v.Name == "WarningDisk" and v.Color and v.Color.R < v.Color.G and (target == nil or (v.Transparency < target.Transparency)) and math.abs(v.Size.X-targetSize) < 5 then
            target = v
        end
    end
    if target ~= nil then
    catching = true
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame - game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Position + (target.CFrame.Position)
    end
end

--auto-pop bubbles
local popping = false
local popDist = 40
local function pop()
    --game.Workspace.Particles.Bubble
    popping = false
    if not bubbles then return end
    local target = nil;
    local root = game.Players.LocalPlayer.Character.HumanoidRootPart
    for _,v in pairs(workspace.Particles:GetChildren()) do
        if v.Name == "Bubble" and v.CFrame ~= nil and (v.CFrame.Position-currp.Position).Magnitude < popDist then
            target = v
        end
    end
    if target ~= nil then
    popping = true
    root.CFrame = target.CFrame
    end
end


local Loop = function(step)
    local off = false
    local windyAlive = false
    for _,v in pairs(game.workspace.NPCBees:GetChildren()) do
      if string.find(v.Name,"Windy") then
            windyAlive = true
      end
    end
    disableAutoFarm = vici or (mondo and workspace.Monsters:FindFirstChild("Mondo Chick (Lvl 8)") ~= nil) or (windyAlive and tpwindy) or coconut
    if disableAutoFarm then return end
    off = (autooff and (not (#game.Players:GetPlayers() == 1)))
    if not off then
        autoSell()
        autoDig()
        if not selling then
            if coconuts then catch(30) end
            if lights and not catching then catch(8) end
            if bubbles and not catching then pop() end
            if not catching and not popping then
                collectTokens()
                fieldTP()
                fieldTP2()
            end
        end
    end
    tpCounter = tpCounter + step
    if tpCounter > tpDelay then
        tpCounter = tpCounter - tpDelay
        tpAvailable = true
    end
    tpCounter2 = tpCounter2 + step
    if tpCounter2 > tpDelay2 then
        tpCounter2 = tpCounter2 - tpDelay2
        tpAvailable2 = true
    end
end


local PollenButton = AutoFarm2:Toggle('Auto-Convert Pollen', function(p)
    pollen = p
end, pollen)

local TokenButton = AutoFarm2:Toggle('Auto-Collect Tokens', function(t)
    tokens = t
end, tokens)

local DigButton = AutoFarm2:Toggle('Auto Dig', function(d)
    dig = d
end, dig)

local CoconutsButton = AutoFarm2:Toggle('Auto-Catch Coconuts', function(c)
    coconuts = c
end, coconuts)

local LightsButton = AutoFarm2:Toggle('Auto-Catch Falling Lights', function(l)
    lights = l
end, lights)

local BubblesButton = AutoFarm2:Toggle('Auto-Pop Bubbles', function(b)
    bubbles = b
end, bubbles)

local FieldButton = AutoFarm2:Toggle('Farm Best Field', function(f)
    field = f
end, field)

local FieldButton2 = AutoFarm2:Toggle('Farm Selected Field', function(f)
    field2 = f
end, field2)

local OffButton = AutoFarm2:Toggle('VIP server Anti-Report', function(o)
    autooff = o
end, autooff)
return Loop
end


local autoFarmV2Loop = autoFarmV2()

local Loop = game:GetService("RunService").Heartbeat:Connect(function(step)
--    if noclip ~= noclipBox:Get() then
--    noclipBox:SetToNoCallback(noclip)
--    end
    autoFarmV2Loop(step)
    kickCheck(step)
end)
